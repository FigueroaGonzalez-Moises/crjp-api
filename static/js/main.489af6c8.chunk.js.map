{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/AddProducts.tsx","components/Announcements.tsx","components/Coupons.tsx","components/EditProduct.tsx","components/Orders.tsx","components/Products.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddCouponDocument","AddImgToProductDocument","AddProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteCouponDocument","DeleteProductDocument","EditTrackingDocument","GetAnnouncementsDocument","GetCouponsDocument","GetOrdersDocument","GetProductDocument","GetProductsDocument","ToggleMaintenanceDocument","UpdateProductDocument","AddProducts","baseOptions","Apollo","addProduct","useAddImgToProductMutation","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","document","getElementById","classList","remove","add","variables","Number","product_id","console","log","i","length","img_url","data","M","toast","html","pathname","state","reload","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","onDrop","file","form","FormData","append","t","Axios","post","headers","res","tmp","push","secure_url","getRootProps","getInputProps","map","_val","src","Announcements","loading","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","useEffect","AutoInit","announcements","getAnnouncements","window","location","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","useToggleMaintenanceMutation","toggleMain","discount","setDiscount","fresh","setFresh","elems","querySelectorAll","Modal","init","Dropdown","getCoupons","coupon_name","marginTop","data-target","toLowerCase","minLength","maxLength","getProductId","split","EditProduct","error","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","tmp_name","tmp_desc","tmp_price","tmp_stock","product","getProduct","then","catch","Orders","useEditTrackingMutation","EditTracking","tracking","setState","getOrders","order","order_id","tracking_num","new_tracking_num","editTracking","products","_val2","j","Products","useLocation","backgroundColor","marginBottom","marginLeft","marginRight","fontWeight","fontSize","color","getProducts","margin","images","maxHeight","toFixed","Routes","exact","path","Login","username","setUsername","password","setPassword","apiLogin","localStorage","setItem","refreshToken","minHeight","minWidth","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.489af6c8.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/coupons\">\r\n                                    Coupons\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href=\"#/announcements\"\r\n                                >\r\n                                    Announcements\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  hello: Scalars['String'];\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products: Array<OrdersProductsWithImages>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  checkout: Scalars['String'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type EditTrackingMutationVariables = Exact<{\n  new_tracking_num: Scalars['String'];\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type EditTrackingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'editTracking'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num'>\n    & { products: Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    )> }\n  )> }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ToggleMaintenanceMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleMaintenance'>\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const EditTrackingDocument = gql`\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\n}\n    `;\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\n\n/**\n * __useEditTrackingMutation__\n *\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\n *   variables: {\n *      new_tracking_num: // value for 'new_tracking_num'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\n      }\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n    }\n    order_id\n    tracking_num\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const ToggleMaintenanceDocument = gql`\n    mutation toggleMaintenance {\n  toggleMaintenance\n}\n    `;\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\n\n/**\n * __useToggleMaintenanceMutation__\n *\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\n      }\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock) {\r\n            document.getElementById(\"name\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"desc\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"price\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"stock\")!.classList.remove(\"invalid\");\r\n            if (!name) {\r\n                document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!desc) {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!price) {\r\n                document.getElementById(\"price\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!stock) {\r\n                document.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n            }\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                console.log(\"product_id\", product_id);\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n                M.toast({ html: \"Contact me on discord\" });\r\n            }\r\n        }\r\n    };\r\n\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    console.log(\"image_urls :>> \", image_urls);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            <Dropzone\r\n                onDrop={async ([file]) => {\r\n                    console.log(\"file :>> \", file);\r\n                    const form = new FormData();\r\n\r\n                    form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                    form.append(\"file\", file);\r\n                    form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                    form.append(\"upload_preset\", \"re5zmdqn\");\r\n                    let t = (Date.now() / 1000) | 0;\r\n                    form.append(\"timestamp\", `${t}`);\r\n\r\n                    // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                    let res = await Axios.post(\r\n                        \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n\r\n                    console.log(\"res :>> \", res);\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                    setRefresh(!refresh);\r\n                }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        DO NOT DOUBLE CLICK PHOTO! SELECT PHOTO THEN PRESS OPEN\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        console.log(\"test\");\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Announcements = () => {\r\n    const { data, loading } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    console.log(\"announcements.length :>> \", announcements.length);\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [toggleMain] = useToggleMaintenanceMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <button\r\n                onClick={() => {\r\n                    toggleMain();\r\n                }}\r\n            >\r\n                Toggle Maintenance\r\n            </button>\r\n            <span> Mainenacne is currently </span>\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <>\r\n                                <div\r\n                                    className=\"container\"\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <h4 className=\"center-align\">\r\n                                        {data.getCoupons[i].coupon_name}\r\n                                    </h4>\r\n\r\n                                    <h4 className=\"center-align\">\r\n                                        -\r\n                                        {data.getCoupons[i].discount\r\n                                            ? data.getCoupons[i].discount\r\n                                            : 0}\r\n                                        %\r\n                                    </h4>\r\n                                    <i\r\n                                        className=\"material-icons red-text\"\r\n                                        onClick={async () => {\r\n                                            let tmp = await deleteCoupon({\r\n                                                variables: {\r\n                                                    coupon_name:\r\n                                                        data.getCoupons[i]\r\n                                                            .coupon_name,\r\n                                                },\r\n                                            });\r\n\r\n                                            if (!tmp!.data!.deleteCoupon) {\r\n                                                M.toast({\r\n                                                    html: \"An error occured\",\r\n                                                });\r\n\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"Could not delete coupon\",\r\n                                                });\r\n                                            } else {\r\n                                                window.location.reload();\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        delete\r\n                                    </i>\r\n                                </div>\r\n                            </>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                console.log(\r\n                                    \"discount.length :>> \",\r\n                                    discount.length\r\n                                );\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useDeleteProductMutation,\r\n    useGetProductQuery,\r\n    useUpdateProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst EditProduct = () => {\r\n    let product_id = getProductId();\r\n\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const image_urls = [\"\"];\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to=\"#/products\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        //only send values which were updated if state is empty product.prop is sent instead\r\n\r\n        let tmp_name = name,\r\n            tmp_desc = desc,\r\n            tmp_price = Number(price),\r\n            tmp_stock = Number(stock);\r\n\r\n        if (!name) {\r\n            tmp_name = product.name;\r\n        }\r\n\r\n        if (!desc) {\r\n            tmp_desc = product.desc;\r\n        }\r\n\r\n        if (!price) {\r\n            tmp_price = product.price;\r\n        }\r\n\r\n        if (!stock) {\r\n            tmp_stock = product.stock;\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: tmp_name,\r\n                desc: tmp_desc,\r\n                price: tmp_price,\r\n                stock: tmp_stock,\r\n            },\r\n        });\r\n\r\n        console.log(\"test\");\r\n        return <Redirect to=\"#/products\" />;\r\n    };\r\n\r\n    let product = data!.getProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => setPrice(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"price\">{product.price}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => setStock(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"stock\">${product.price / 100}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"btn green\" onClick={() => handleSubmit()}>\r\n                    Submit\r\n                </button>\r\n\r\n                <button\r\n                    className=\"btn right red\"\r\n                    onClick={async () => {\r\n                        await deleteProduct({ variables: { product_id } });\r\n                        window.location.reload();\r\n                    }}\r\n                >\r\n                    Delete Product\r\n                </button>\r\n\r\n                <Dropzone\r\n                    onDrop={async ([file]) => {\r\n                        const form = new FormData();\r\n\r\n                        form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                        form.append(\"file\", file);\r\n                        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                        form.append(\"upload_preset\", \"re5zmdqn\");\r\n                        let t = (Date.now() / 1000) | 0;\r\n                        form.append(\"timestamp\", `${t}`);\r\n\r\n                        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                        Axios.post(\r\n                            \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                            form,\r\n                            {\r\n                                headers: {\r\n                                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                                },\r\n                            }\r\n                        )\r\n                            .then(res => {\r\n                                //Save image url to add to DB on submit\r\n                                image_urls.push(res.data.secure_url);\r\n                            })\r\n                            .catch(error => {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"An Error occured, please try again later.\",\r\n                                });\r\n                                console.log(\"error\", error);\r\n                            });\r\n                    }}\r\n                >\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <div {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            Click me to add a photo\r\n                        </div>\r\n                    )}\r\n                </Dropzone>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getProductId = (): number => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {data!.getOrders.map((_val, i) => {\r\n                        let order: any = data?.getOrders[i];\r\n                        return (\r\n                            <tr>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit Tracking\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\">\r\n                                                    {order.products[j].name}\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import { useGetProductsQuery } from \"../generated/graphql\";\r\nimport \"../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n    const { data, loading } = useGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\" large material-icons\">\r\n                                        edit\r\n                                    </i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n\r\n// <div className=\"col s4\">\r\n//     <div className=\"card\">\r\n//         <div className=\"card-image\">\r\n//             {/* <img src=\"images/sample-1.jpg\"> */}\r\n//         </div>\r\n//         <div className=\"card-content\">\r\n//             <h6>Product Name</h6>\r\n//         </div>\r\n//     </div>\r\n// </div>\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/AddProducts\";\r\nimport Announcements from \"../components/Announcements\";\r\nimport Coupons from \"../components/Coupons\";\r\nimport EditProduct from \"../components/EditProduct\";\r\nimport Orders from \"../components/Orders\";\r\nimport Products from \"../components/Products\";\r\nimport AuthRoute from \"./AuthRoute\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/coupons\" component={Coupons} />\r\n            <AuthRoute exact path=\"/announcements\" component={Announcements} />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://infinite-bayou-56493.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}