{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/AddProducts.tsx","components/Announcements.tsx","components/Coupons.tsx","components/EditProduct.tsx","components/AuthorList.tsx","components/reorder.ts","components/EditSocials.tsx","components/EditUsers.tsx","components/Maintenance.tsx","components/OrderDetails.tsx","components/Orders.tsx","components/Products.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddApiUserDocument","AddCouponDocument","AddImgToProductDocument","useAddImgToProductMutation","baseOptions","Apollo","AddProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteApiUserDocument","DeleteCouponDocument","DeleteProductDocument","EditTrackingDocument","GetAnnouncementsDocument","GetApiUsersDocument","GetCouponsDocument","GetMaintenanceDocument","GetOrderByIdDocument","GetOrdersDocument","GetProductDocument","GetProductsDocument","RemoveImgFromProductDocument","RemoveWarningDocument","ToggleMaintenanceDocument","UpdateProductDocument","AddProducts","addProduct","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","inputValidation","variables","Number","product_id","i","length","img_url","data","M","toast","html","document","getElementById","classList","remove","addImages","files","form","FormData","append","t","Axios","post","headers","res","tmp","push","secure_url","pathname","state","reload","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","add","onDrop","getRootProps","getInputProps","map","_val","src","ids","doc","Announcements","loading","error","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","useEffect","AutoInit","console","log","announcements","getAnnouncements","window","location","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","discount","setDiscount","fresh","setFresh","elems","querySelectorAll","Modal","init","Dropdown","getCoupons","coupon_name","marginTop","data-target","toLowerCase","minLength","maxLength","getProductId","split","toggleDisabledClass","idList","toggle","EditProduct","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","useRemoveImgFromProductMutation","deleteImg","image_ids","setImage_ids","product","getProduct","img_id","toFixed","images","margin","AuthorList","listId","listType","colors","droppableId","direction","isCombineEnabled","dropProvided","droppableProps","ref","innerRef","color","index","draggableId","dragProvided","dragHandleProps","draggableProps","backgroundColor","placeholder","reorderColors","source","destination","current","next","reordered","list","startIndex","endIndex","result","Array","from","splice","removed","reorder","EditSocials","b","c","colorMap","setColors","onDragEnd","Object","entries","key","val","internalScroll","EditUsers","useDeleteApiUserMutation","deleteApiUser","useAddApiUserMutation","addApiUser","username","setUsername","password","setPassword","getApiUsers","uuid","Maintenance","useToggleMaintenanceMutation","toggleMaintenance","getMaintenance","checked","getOrderId","OrderDetails","useMemo","order_id","useRemoveWarningMutation","removeWarning","setState","message","str","dateOfPurchase","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcProdSubtotal","getOrderById","amountOff","order_total","date_of_purchase","shipping","JSON","parse","warning","fontWeight","marginLeft","marginBottom","coupon","padding","borderLeft","paddingTop","paddingBottom","paddingRight","paddingLeft","zIndex","position","j","flexDirection","height","fontSize","line1","city","postal_code","country","Orders","useEditTrackingMutation","EditTracking","tracking","getOrders","reverse","order","tracking_num","new_tracking_num","editTracking","_val2","Products","useLocation","marginRight","getProducts","maxHeight","Routes","exact","path","Login","apiLogin","localStorage","setItem","refreshToken","minHeight","minWidth","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","then","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","bind","complete","catch","unsubscribe","client","ApolloClient","link","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.568c0bca.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/coupons\">\r\n                                    Coupons\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href=\"#/announcements\"\r\n                                >\r\n                                    Announcements\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/maintenance\">\r\n                                    Maintenance\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/edit-socials\">\r\n                                    Edit Socials\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/edit-users\">\r\n                                    Users\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getOrderById: GetOrdersResponse;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  getApiUsers: Array<ApiUser>;\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n};\n\n\nexport type QueryGetOrderByIdArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n  date_of_purchase?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type ApiUser = {\n  __typename?: 'ApiUser';\n  uuid: Scalars['Float'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['Boolean'];\n  checkout: Scalars['String'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  deleteApiUser: Scalars['Boolean'];\n  addApiUser: Scalars['Boolean'];\n  removeWarning: Scalars['Boolean'];\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveImgFromProductArgs = {\n  img_id: Scalars['Float'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationDeleteApiUserArgs = {\n  uuid: Scalars['Float'];\n};\n\n\nexport type MutationAddApiUserArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationRemoveWarningArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddApiUserMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type AddApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addApiUser'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteApiUserMutationVariables = Exact<{\n  uuid: Scalars['Float'];\n}>;\n\n\nexport type DeleteApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteApiUser'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type EditTrackingMutationVariables = Exact<{\n  new_tracking_num: Scalars['String'];\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type EditTrackingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'editTracking'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetApiUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetApiUsersQuery = (\n  { __typename?: 'Query' }\n  & { getApiUsers: Array<(\n    { __typename?: 'ApiUser' }\n    & Pick<ApiUser, 'uuid' | 'username'>\n  )> }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetOrderByIdQueryVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type GetOrderByIdQuery = (\n  { __typename?: 'Query' }\n  & { getOrderById: (\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'shipping' | 'warning' | 'order_total' | 'coupon' | 'discount' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  ) }\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'warning' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type RemoveImgFromProductMutationVariables = Exact<{\n  img_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveImgFromProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeImgFromProduct'>\n);\n\nexport type RemoveWarningMutationVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveWarningMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeWarning'>\n);\n\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ToggleMaintenanceMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleMaintenance'>\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddApiUserDocument = gql`\n    mutation addApiUser($username: String!, $password: String!) {\n  addApiUser(username: $username, password: $password)\n}\n    `;\nexport type AddApiUserMutationFn = Apollo.MutationFunction<AddApiUserMutation, AddApiUserMutationVariables>;\n\n/**\n * __useAddApiUserMutation__\n *\n * To run a mutation, you first call `useAddApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addApiUserMutation, { data, loading, error }] = useAddApiUserMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useAddApiUserMutation(baseOptions?: Apollo.MutationHookOptions<AddApiUserMutation, AddApiUserMutationVariables>) {\n        return Apollo.useMutation<AddApiUserMutation, AddApiUserMutationVariables>(AddApiUserDocument, baseOptions);\n      }\nexport type AddApiUserMutationHookResult = ReturnType<typeof useAddApiUserMutation>;\nexport type AddApiUserMutationResult = Apollo.MutationResult<AddApiUserMutation>;\nexport type AddApiUserMutationOptions = Apollo.BaseMutationOptions<AddApiUserMutation, AddApiUserMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteApiUserDocument = gql`\n    mutation deleteApiUser($uuid: Float!) {\n  deleteApiUser(uuid: $uuid)\n}\n    `;\nexport type DeleteApiUserMutationFn = Apollo.MutationFunction<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\n\n/**\n * __useDeleteApiUserMutation__\n *\n * To run a mutation, you first call `useDeleteApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteApiUserMutation, { data, loading, error }] = useDeleteApiUserMutation({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useDeleteApiUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>) {\n        return Apollo.useMutation<DeleteApiUserMutation, DeleteApiUserMutationVariables>(DeleteApiUserDocument, baseOptions);\n      }\nexport type DeleteApiUserMutationHookResult = ReturnType<typeof useDeleteApiUserMutation>;\nexport type DeleteApiUserMutationResult = Apollo.MutationResult<DeleteApiUserMutation>;\nexport type DeleteApiUserMutationOptions = Apollo.BaseMutationOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const EditTrackingDocument = gql`\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\n}\n    `;\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\n\n/**\n * __useEditTrackingMutation__\n *\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\n *   variables: {\n *      new_tracking_num: // value for 'new_tracking_num'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\n      }\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetApiUsersDocument = gql`\n    query getApiUsers {\n  getApiUsers {\n    uuid\n    username\n  }\n}\n    `;\n\n/**\n * __useGetApiUsersQuery__\n *\n * To run a query within a React component, call `useGetApiUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetApiUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetApiUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetApiUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n        return Apollo.useQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n      }\nexport function useGetApiUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n          return Apollo.useLazyQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n        }\nexport type GetApiUsersQueryHookResult = ReturnType<typeof useGetApiUsersQuery>;\nexport type GetApiUsersLazyQueryHookResult = ReturnType<typeof useGetApiUsersLazyQuery>;\nexport type GetApiUsersQueryResult = Apollo.QueryResult<GetApiUsersQuery, GetApiUsersQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetOrderByIdDocument = gql`\n    query getOrderById($order_id: Float!) {\n  getOrderById(order_id: $order_id) {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    shipping\n    warning\n    order_total\n    coupon\n    discount\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrderByIdQuery__\n *\n * To run a query within a React component, call `useGetOrderByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderByIdQuery({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useGetOrderByIdQuery(baseOptions: Apollo.QueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n        return Apollo.useQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n      }\nexport function useGetOrderByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n        }\nexport type GetOrderByIdQueryHookResult = ReturnType<typeof useGetOrderByIdQuery>;\nexport type GetOrderByIdLazyQueryHookResult = ReturnType<typeof useGetOrderByIdLazyQuery>;\nexport type GetOrderByIdQueryResult = Apollo.QueryResult<GetOrderByIdQuery, GetOrderByIdQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    warning\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const RemoveImgFromProductDocument = gql`\n    mutation removeImgFromProduct($img_id: Float!) {\n  removeImgFromProduct(img_id: $img_id)\n}\n    `;\nexport type RemoveImgFromProductMutationFn = Apollo.MutationFunction<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\n\n/**\n * __useRemoveImgFromProductMutation__\n *\n * To run a mutation, you first call `useRemoveImgFromProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveImgFromProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeImgFromProductMutation, { data, loading, error }] = useRemoveImgFromProductMutation({\n *   variables: {\n *      img_id: // value for 'img_id'\n *   },\n * });\n */\nexport function useRemoveImgFromProductMutation(baseOptions?: Apollo.MutationHookOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>) {\n        return Apollo.useMutation<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>(RemoveImgFromProductDocument, baseOptions);\n      }\nexport type RemoveImgFromProductMutationHookResult = ReturnType<typeof useRemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationResult = Apollo.MutationResult<RemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationOptions = Apollo.BaseMutationOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\nexport const RemoveWarningDocument = gql`\n    mutation removeWarning($order_id: Float!) {\n  removeWarning(order_id: $order_id)\n}\n    `;\nexport type RemoveWarningMutationFn = Apollo.MutationFunction<RemoveWarningMutation, RemoveWarningMutationVariables>;\n\n/**\n * __useRemoveWarningMutation__\n *\n * To run a mutation, you first call `useRemoveWarningMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWarningMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWarningMutation, { data, loading, error }] = useRemoveWarningMutation({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useRemoveWarningMutation(baseOptions?: Apollo.MutationHookOptions<RemoveWarningMutation, RemoveWarningMutationVariables>) {\n        return Apollo.useMutation<RemoveWarningMutation, RemoveWarningMutationVariables>(RemoveWarningDocument, baseOptions);\n      }\nexport type RemoveWarningMutationHookResult = ReturnType<typeof useRemoveWarningMutation>;\nexport type RemoveWarningMutationResult = Apollo.MutationResult<RemoveWarningMutation>;\nexport type RemoveWarningMutationOptions = Apollo.BaseMutationOptions<RemoveWarningMutation, RemoveWarningMutationVariables>;\nexport const ToggleMaintenanceDocument = gql`\n    mutation toggleMaintenance {\n  toggleMaintenance\n}\n    `;\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\n\n/**\n * __useToggleMaintenanceMutation__\n *\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\n      }\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock) {\r\n            inputValidation(name, desc, price, stock);\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n            }\r\n        }\r\n        document.getElementById(\"submit-btn\")?.classList.remove(\"disabled\");\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                let res = await Axios.post(\r\n                    \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n            }\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            id=\"submit-btn\"\r\n                            className=\"btn green\"\r\n                            onClick={() => {\r\n                                document\r\n                                    .getElementById(\"submit-btn\")!\r\n                                    .classList.add(\"disabled\");\r\n                                handleSubmit();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n\r\n                        <Dropzone onDrop={async files => addImages(files)}>\r\n                            {({ getRootProps, getInputProps }) => (\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <button className=\"btn black\">\r\n                                        Add Images\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </Dropzone>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n\r\nconst inputValidation = (name: any, desc: any, price: any, stock: any) => {\r\n    let ids = [\"name\", \"desc\", \"price\", \"stock\"],\r\n        doc = document;\r\n\r\n    for (let i = 0; i < ids.length; i++) {\r\n        try {\r\n            doc.getElementById(ids[i])!.classList.remove(\"invalid\");\r\n        } catch {}\r\n    }\r\n\r\n    if (!name) {\r\n        doc.getElementById(\"name\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!desc) {\r\n        doc.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!price) {\r\n        doc.getElementById(\"price\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!stock) {\r\n        doc.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n    }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Announcements = () => {\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text noselect\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading, error } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {data.getCoupons[i].coupon_name}\r\n                                </h4>\r\n                                <h5 className=\"center-align\">\r\n                                    -\r\n                                    {data.getCoupons[i].discount\r\n                                        ? data.getCoupons[i].discount\r\n                                        : 0}\r\n                                    %\r\n                                </h5>\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        let tmp = await deleteCoupon({\r\n                                            variables: {\r\n                                                coupon_name:\r\n                                                    data.getCoupons[i]\r\n                                                        .coupon_name,\r\n                                            },\r\n                                        });\r\n\r\n                                        if (!tmp!.data!.deleteCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n\r\n                                            M.toast({\r\n                                                html: \"Could not delete coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useDeleteProductMutation,\r\n    useGetProductQuery,\r\n    useRemoveImgFromProductMutation,\r\n    useUpdateProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst EditProduct = () => {\r\n    let product_id = getProductId();\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [deleteImg] = useRemoveImgFromProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [image_ids, setImage_ids] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to=\"#/products\" />;\r\n    }\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            M.toast({ html: \"Adding images please wait...\" });\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                try {\r\n                    let res = await Axios.post(\r\n                        \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                } catch (error) {\r\n                    M.toast({ html: `Error: ${error}` });\r\n                }\r\n            }\r\n\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: name || product.name,\r\n                desc: desc || product.desc,\r\n                price: Number(price) || product.price,\r\n                stock: Number(stock) || product.stock,\r\n            },\r\n        });\r\n\r\n        for (let i = 0; i < image_urls.length; i++) {\r\n            try {\r\n                await addImgToProduct({\r\n                    variables: {\r\n                        img_url: image_urls[i],\r\n                        product_id: data?.getProduct.product_id!,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                M.toast({\r\n                    html: `Error occured while trying to add an image: ${err}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < image_ids.length; i++) {\r\n            try {\r\n                await deleteImg({\r\n                    variables: {\r\n                        img_id: image_ids[i],\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                M.toast({\r\n                    html: `Error occured while trying to remove an image: ${e}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        window.location.reload();\r\n    };\r\n\r\n    let product = data!.getProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">\r\n                            ${Number(product.price / 100).toFixed(2)}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">{product.stock}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async files => addImages(files)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Add Images\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"products-grid\" style={{ marginTop: \"32px\" }}>\r\n                    {data?.getProduct.images!.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"card\"\r\n                                style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                id={`card-${i}`}\r\n                                key={i}\r\n                            >\r\n                                <span\r\n                                    className=\"close-icon noselect\"\r\n                                    onClick={async () => {\r\n                                        let tmp: any = image_ids;\r\n                                        tmp.push(\r\n                                            data.getProduct.images![i].img_id\r\n                                        );\r\n                                        setImage_ids(tmp);\r\n                                        document.getElementById(\r\n                                            `card-${i}`\r\n                                        )!.style.display = \"none\";\r\n                                    }}\r\n                                >\r\n                                    <i className=\"material-icons white-text\">\r\n                                        close\r\n                                    </i>\r\n                                </span>\r\n                                <div className=\"card-image noselect\">\r\n                                    <img\r\n                                        src={\r\n                                            data?.getProduct.images![i]\r\n                                                .img_url ||\r\n                                            \"https://materializecss.com/images/sample-1.jpg\"\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {image_urls.length === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {image_urls.map((_val, i) => {\r\n                                return (\r\n                                    <div\r\n                                        className=\"card\"\r\n                                        style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    >\r\n                                        <div className=\"card-image noselect\">\r\n                                            <img src={image_urls[i] as any} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </form>\r\n\r\n            <div id=\"modal1\" className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <h4>Are you sure you want to delete this product?</h4>\r\n                    <p>This will also delete all of the users orders.</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        id=\"delete-button\"\r\n                        className=\"btn right red\"\r\n                        onClick={async () => {\r\n                            toggleDisabledClass([\"delete-button\"]);\r\n\r\n                            let tmp = await deleteProduct({\r\n                                variables: { product_id },\r\n                            });\r\n\r\n                            if (tmp.data?.deleteProduct) {\r\n                                window.location.reload();\r\n                            } else {\r\n                                M.toast({ html: \"Could not delete product\" });\r\n                                toggleDisabledClass([\"delete-button\"]);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete Product\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getProductId = (): number => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nconst toggleDisabledClass = (idList: string[]) => {\r\n    for (let i = 0; i < idList.length; i++) {\r\n        try {\r\n            document.getElementById(idList[i])!.classList.toggle(\"disabled\");\r\n        } catch {}\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import React from \"react\";\r\nimport { Droppable, Draggable, DroppableProvided } from \"react-beautiful-dnd\";\r\n\r\ninterface Props {\r\n    colors: string[];\r\n    listId: string;\r\n    listType?: string;\r\n    internalScroll?: boolean;\r\n    isCombineEnabled?: boolean;\r\n}\r\n\r\nexport const AuthorList: React.FC<Props> = ({ listId, listType, colors }) => {\r\n    return (\r\n        <Droppable\r\n            droppableId={listId}\r\n            type={listType}\r\n            direction=\"horizontal\"\r\n            isCombineEnabled={false}\r\n        >\r\n            {(dropProvided: DroppableProvided) => (\r\n                <div {...dropProvided.droppableProps}>\r\n                    <div>\r\n                        <div>\r\n                            <div\r\n                                style={{ display: \"flex\" }}\r\n                                ref={dropProvided.innerRef}\r\n                            >\r\n                                {colors.map((color, index: number) => (\r\n                                    <Draggable\r\n                                        key={color}\r\n                                        draggableId={color}\r\n                                        index={index}\r\n                                    >\r\n                                        {dragProvided => (\r\n                                            <div\r\n                                                {...dragProvided.dragHandleProps}\r\n                                                {...dragProvided.draggableProps}\r\n                                                ref={dragProvided.innerRef}\r\n                                            >\r\n                                                <div\r\n                                                    style={{\r\n                                                        backgroundColor: color,\r\n                                                    }}\r\n                                                >\r\n                                                    {color}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {dropProvided.placeholder}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n};\r\n","import { DraggableLocation } from \"react-beautiful-dnd\";\r\n\r\n// a little function to help us with reordering the result\r\nexport const reorder = (\r\n    list: any[],\r\n    startIndex: number,\r\n    endIndex: number\r\n): any[] => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nexport const reorderColors = (\r\n    colors: { [key: string]: string[] },\r\n    source: DraggableLocation,\r\n    destination: DraggableLocation\r\n) => {\r\n    const current = [...colors[source.droppableId]];\r\n    const next = [...colors[destination.droppableId]];\r\n    const target = current[source.index];\r\n\r\n    // moving to same list\r\n    if (source.droppableId === destination.droppableId) {\r\n        const reordered = reorder(current, source.index, destination.index);\r\n        return {\r\n            ...colors,\r\n            [source.droppableId]: reordered,\r\n        };\r\n    }\r\n\r\n    // moving to different list\r\n\r\n    // remove from original\r\n    current.splice(source.index, 1);\r\n    // insert into next\r\n    next.splice(destination.index, 0, target);\r\n\r\n    return {\r\n        ...colors,\r\n        [source.droppableId]: current,\r\n        [destination.droppableId]: next,\r\n    };\r\n};\r\n","import { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { AuthorList } from \"./AuthorList\";\r\nimport { reorderColors } from \"./reorder\";\r\n\r\nconst EditSocials = () => {\r\n    const [colorMap, setColors] = useState<{ [key: string]: string[] }>({\r\n        a: [\"blue\", \"red\", \"yellow\"],\r\n        b: [\"pink\"],\r\n        c: [\"green\", \"tan\"],\r\n    });\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={({ destination, source }) => {\r\n                // // dropped outside the list\r\n                if (!destination) {\r\n                    return;\r\n                }\r\n\r\n                setColors(reorderColors(colorMap, source, destination));\r\n            }}\r\n        >\r\n            <div>\r\n                {Object.entries(colorMap).map(([key, val]) => (\r\n                    <AuthorList\r\n                        internalScroll\r\n                        key={key}\r\n                        listId={key}\r\n                        listType=\"CARD\"\r\n                        colors={val}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default EditSocials;\r\n","import {\r\n    useGetApiUsersQuery,\r\n    useDeleteApiUserMutation,\r\n    useAddApiUserMutation,\r\n} from \"../generated/graphql\";\r\nimport \"../css/table.scss\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst EditUsers = () => {\r\n    const { data, loading, error } = useGetApiUsersQuery();\r\n    const [deleteApiUser] = useDeleteApiUserMutation();\r\n    const [addApiUser] = useAddApiUserMutation();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <>An error has occurred</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Api Users</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <div className=\"container\">\r\n                            <table className=\"striped responsive\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th></th>\r\n                                        <th>Username</th>\r\n                                        <th></th>\r\n                                        <th></th>\r\n                                    </tr>\r\n\r\n                                    {data.getApiUsers.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td></td>\r\n                                                <td>\r\n                                                    {\r\n                                                        data.getApiUsers[i]\r\n                                                            .username\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <i\r\n                                                        className=\"material-icons red-text noselect\"\r\n                                                        onClick={async () => {\r\n                                                            // delete user\r\n                                                            let tmp = await deleteApiUser(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        uuid:\r\n                                                                            data\r\n                                                                                .getApiUsers[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .uuid,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.deleteApiUser\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An Error has occured\",\r\n                                                                });\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        delete\r\n                                                    </i>\r\n                                                </td>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"username\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={username}\r\n                                        onChange={e =>\r\n                                            setUsername(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"username\">Username</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a username\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"pass\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={password}\r\n                                        onChange={e =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"pass\">Password</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a password\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s3\">\r\n                                <button\r\n                                    style={{ width: \"100%\" }}\r\n                                    className=\"btn right footerBtn green\"\r\n                                    onClick={async () => {\r\n                                        document\r\n                                            .getElementById(\"pass\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        document\r\n                                            .getElementById(\"username\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        if (!password || !username) {\r\n                                            if (!password) {\r\n                                                document\r\n                                                    .getElementById(\"pass\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n\r\n                                            if (!username) {\r\n                                                document\r\n                                                    .getElementById(\"username\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n                                        } else {\r\n                                            let tmp = await addApiUser({\r\n                                                variables: {\r\n                                                    username,\r\n                                                    password,\r\n                                                },\r\n                                            });\r\n                                            if (tmp.data?.addApiUser) {\r\n                                                window.location.reload();\r\n                                            } else {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"An Error has occurred\",\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Create a user\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditUsers;\r\n","import {\r\n    useGetMaintenanceQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Maintenance = () => {\r\n    const { data, loading, error } = useGetMaintenanceQuery();\r\n    const [toggleMaintenance] = useToggleMaintenanceMutation();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    } else if (!data || error) {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Maintenance: ERR</h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"centered\" style={{ marginTop: \"32px\" }}>\r\n                <h4>\r\n                    <span className=\"switch\">\r\n                        Maintenance:{\" \"}\r\n                        {data.getMaintenance ? (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" checked />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        ) : (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        )}\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maintenance;\r\n","import {\r\n    useGetOrderByIdQuery,\r\n    useRemoveWarningMutation,\r\n} from \"../generated/graphql\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst calcProdSubtotal = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        console.log(\r\n            \"products[i].quantityOrdered :>> \",\r\n            products[i].quantityOrdered\r\n        );\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst getOrderId = () => {\r\n    console.log(\"gettings order id\");\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return window.location.href.split(\":\")[2];\r\n    } else {\r\n        return window.location.href.split(\":\")[3];\r\n    }\r\n};\r\n\r\nconst OrderDetails = () => {\r\n    const id = useMemo(() => getOrderId(), [getOrderId]);\r\n\r\n    const { data, loading, error } = useGetOrderByIdQuery({\r\n        variables: {\r\n            order_id: Number(id),\r\n        },\r\n    });\r\n\r\n    const [removeWarning] = useRemoveWarningMutation();\r\n\r\n    const [state, setState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>No data was found</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>An Error has occured.</h3>\r\n                <h3>{error.message}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const { productsSubtotal, shippingTotal } = calcProdSubtotal(\r\n        data.getOrderById.products!\r\n    );\r\n\r\n    let amountOff = Number(\r\n        (data.getOrderById.order_total! *\r\n            Number(\"0.\" + data.getOrderById.discount)) /\r\n            100\r\n    ).toFixed(2);\r\n\r\n    let str, dateOfPurchase;\r\n    if (data.getOrderById.date_of_purchase) {\r\n        str = data.getOrderById.date_of_purchase.split(\" \");\r\n        dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n    }\r\n\r\n    let shipping = JSON.parse(data.getOrderById.shipping!);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {!data.getOrderById.warning ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <div id=\"modal1\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>\r\n                                Are you sure you want to remove this warning?\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <a\r\n                                href=\"#!\"\r\n                                className=\"modal-close btn red\"\r\n                                onClick={async () => {\r\n                                    let tmp = await removeWarning({\r\n                                        variables: {\r\n                                            order_id: Number(id),\r\n                                        },\r\n                                    });\r\n                                    if (tmp.data?.removeWarning) {\r\n                                        window.location.reload();\r\n                                    } else {\r\n                                        M.toast({\r\n                                            html: \"An Error has occurred\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html:\r\n                                                \"Please try again later or contact me on discord\",\r\n                                        });\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 \">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <span\r\n                                        className=\"card-title \"\r\n                                        style={{ fontWeight: \"bold\" }}\r\n                                    >\r\n                                        <span className=\"red-text\">\r\n                                            {data.getOrderById.warning}\r\n                                        </span>\r\n                                        <span className=\"right\">\r\n                                            <a\r\n                                                className=\"btn modal-trigger black\"\r\n                                                href=\"#modal1\"\r\n                                            >\r\n                                                Remove Warning\r\n                                            </a>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <p className=\"flow-text bold\">\r\n                                        What to do:\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        Double check the order. Ensure the\r\n                                        customer paid the correct amount\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        This error will be thrown anytime there\r\n                                        is the slightest difference in\r\n                                        calculations.\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        If the difference is greater than a\r\n                                        couple of pennies please contact me\r\n                                        through discord.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {state ? (\r\n                <>\r\n                    <div className=\"row\">\r\n                        <div className=\"col offset-s6 s6\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s10 offset-s1\">\r\n                                            <span className=\"card-title\">\r\n                                                Order Summary\r\n                                            </span>\r\n\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Products Total\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${productsSubtotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Tax\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    $\r\n                                                    {Number(\r\n                                                        Number(\r\n                                                            productsSubtotal\r\n                                                        ) * 0.095\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Shipping\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${shippingTotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <>\r\n                                                {!data.getOrderById.coupon ? (\r\n                                                    <></>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <div\r\n                                                            className=\"divider\"\r\n                                                            style={{\r\n                                                                marginTop:\r\n                                                                    \"4px\",\r\n                                                                marginBottom:\r\n                                                                    \"4px\",\r\n                                                            }}\r\n                                                        ></div>\r\n                                                        <span className=\"left\">\r\n                                                            Coupon(\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .coupon\r\n                                                            }\r\n                                                            )\r\n                                                        </span>\r\n                                                        <span className=\"right\">\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .discount\r\n                                                            }\r\n                                                            % (\r\n                                                            <span className=\"red-text bold\">\r\n                                                                -${amountOff}\r\n                                                            </span>\r\n                                                            )\r\n                                                        </span>\r\n                                                    </>\r\n                                                )}\r\n                                            </>\r\n\r\n                                            <br />\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n                                            <span className=\"left bold\">\r\n                                                Order Total\r\n                                            </span>\r\n                                            <span className=\"right bold\">\r\n                                                $\r\n                                                {Number(\r\n                                                    data.getOrderById\r\n                                                        .order_total! / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n\r\n            <div style={{ marginTop: \"16px\" }}>\r\n                <div className=\"row z-depth-1\">\r\n                    <div\r\n                        className=\"col s12\"\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            backgroundColor: \"white\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"card-header row\"\r\n                            style={{\r\n                                borderLeft: \"5px solid #ff0000\",\r\n                                paddingTop: \"13px\",\r\n                                paddingBottom: \"13px\",\r\n                                paddingRight: \"25px\",\r\n                                paddingLeft: \"20px\",\r\n                                margin: \"0px\",\r\n                                zIndex: 4,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <span\r\n                                className=\"hide-on-small-only\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"41.7%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                className=\"hide-on-med-and-up\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"50%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"17%\",\r\n                                }}\r\n                                className=\"hide-on-med-and-down\"\r\n                            >\r\n                                {data.getOrderById.date_of_purchase ? (\r\n                                    <span>{dateOfPurchase}</span>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"30.3%\",\r\n                                    fontWeight: 700,\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <span>\r\n                                        $\r\n                                        {Number(\r\n                                            data.getOrderById.order_total! / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                        {data.getOrderById.discount ? (\r\n                                            <span>\r\n                                                (\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgb(255, 0, 0)\",\r\n                                                    }}\r\n                                                >\r\n                                                    -$\r\n                                                    {amountOff}\r\n                                                </span>\r\n                                                )\r\n                                            </span>\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </span>\r\n                                    <span>\r\n                                        <span\r\n                                            style={{ color: \"#0457c8\" }}\r\n                                            className=\"right\"\r\n                                            onClick={() => setState(!state)}\r\n                                        >\r\n                                            Payment Details\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n\r\n                        <div\r\n                            className=\"card-body\"\r\n                            style={{\r\n                                backgroundColor: \"white\",\r\n                                zIndex: 2,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            {data.getOrderById.products!.map(\r\n                                (_val: any, j: any) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className=\"row\" key={j}>\r\n                                                <div className=\"col m4\">\r\n                                                    <img\r\n                                                        style={{\r\n                                                            width: \"100%\",\r\n                                                        }}\r\n                                                        src={\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .images![0]\r\n                                                                .img_url\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        flexDirection: \"column\",\r\n                                                        justifyContent:\r\n                                                            \"space-between\",\r\n                                                        height: \"100%\",\r\n                                                        paddingLeft: 0,\r\n                                                    }}\r\n                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name!\r\n                                                        }\r\n                                                    </p>\r\n                                                    <p className=\"hide-on-small-only\">\r\n                                                        Qty:{\" \"}\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .quantityOrdered\r\n                                                        }{\" \"}\r\n                                                        ($\r\n                                                        {Number(\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .productSubtotal! /\r\n                                                                100\r\n                                                        ).toFixed(2)}{\" \"}\r\n                                                        {data.getOrderById\r\n                                                            .products![j]\r\n                                                            .quantityOrdered ===\r\n                                                        1 ? (\r\n                                                            <></>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                @ $\r\n                                                                {Number(\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].price /\r\n                                                                        100\r\n                                                                ).toFixed(\r\n                                                                    2\r\n                                                                )}{\" \"}\r\n                                                                each\r\n                                                            </>\r\n                                                        )}\r\n                                                        )\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                                <div className=\"col offset-m1 m3\">\r\n                                                    <>\r\n                                                        {j === 0 ? (\r\n                                                            <>\r\n                                                                {!shipping ? (\r\n                                                                    <> </>\r\n                                                                ) : (\r\n                                                                    <>\r\n                                                                        <p className=\"bold\">\r\n                                                                            {!shipping.name ? (\r\n                                                                                <>\r\n                                                                                    No\r\n                                                                                    shipping\r\n                                                                                    information\r\n                                                                                    was\r\n                                                                                    found,\r\n                                                                                    check\r\n                                                                                    paypal,\r\n                                                                                    or\r\n                                                                                    contact\r\n                                                                                    the\r\n                                                                                    user.\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {\r\n                                                                                        shipping.name\r\n                                                                                    }\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </p>\r\n                                                                        <div\r\n                                                                            style={{\r\n                                                                                width:\r\n                                                                                    \"100%\",\r\n                                                                                borderBottom:\r\n                                                                                    \" 4px solid #ff0000\",\r\n                                                                            }}\r\n                                                                        ></div>\r\n                                                                    </>\r\n                                                                )}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <> </>\r\n                                                        )}\r\n                                                    </>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name\r\n                                                        }\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderDetails;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading, error } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    data.getOrders.reverse();\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                        <th>Order Total</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {data!.getOrders.map((_val, i) => {\r\n                        let order: any = data?.getOrders[i];\r\n\r\n                        if (order.warning) {\r\n                            M.toast({\r\n                                html: `Order #${order.order_id} has a warning`,\r\n                            });\r\n                        }\r\n\r\n                        return (\r\n                            <tr className={order.warning ? \"red\" : \"\"} key={i}>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\" key={j}>\r\n                                                    {order.products[j].name} x{\" \"}\r\n                                                    {\r\n                                                        order.products[j]\r\n                                                            .quantityOrdered\r\n                                                    }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    $\r\n                                    {Number(order.order_total / 100).toFixed(2)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        href={`#/order-details:${order.order_id}`}\r\n                                    >\r\n                                        See Details\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import { useGetProductsQuery } from \"../generated/graphql\";\r\nimport \"../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0] ||\r\n                                !product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\" large material-icons\">\r\n                                        edit\r\n                                    </i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/AddProducts\";\r\nimport Announcements from \"../components/Announcements\";\r\nimport Coupons from \"../components/Coupons\";\r\nimport EditProduct from \"../components/EditProduct\";\r\nimport EditSocials from \"../components/EditSocials\";\r\nimport EditUsers from \"../components/EditUsers\";\r\nimport Maintenance from \"../components/Maintenance\";\r\nimport OrderDetails from \"../components/OrderDetails\";\r\nimport Orders from \"../components/Orders\";\r\nimport Products from \"../components/Products\";\r\nimport AuthRoute from \"./AuthRoute\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/coupons\" component={Coupons} />\r\n            <AuthRoute exact path=\"/announcements\" component={Announcements} />\r\n            <AuthRoute exact path=\"/maintenance\" component={Maintenance} />\r\n            <AuthRoute exact path=\"/edit-socials\" component={EditSocials} />\r\n            <AuthRoute\r\n                exact\r\n                path=\"/order-details:id\"\r\n                component={OrderDetails}\r\n            />\r\n            <AuthRoute exact path=\"/edit-users\" component={EditUsers} />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.log(\"err :>> \", err);\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://infinite-bayou-56493.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}