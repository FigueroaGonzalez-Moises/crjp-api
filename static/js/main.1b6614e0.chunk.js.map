{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/AddProducts.tsx","components/Announcements.tsx","components/Coupons.tsx","components/EditProduct.tsx","components/Orders.tsx","components/Products.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","className","style","borderBottom","display","justifyContent","id","href","PageWrapper","children","AddAnnouncementDocument","gql","AddCouponDocument","AddImgToProductDocument","AddProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteCouponDocument","DeleteProductDocument","GetAnnouncementsDocument","GetCouponsDocument","GetOrdersDocument","GetProductDocument","GetProductsDocument","UpdateProductDocument","AddProducts","baseOptions","Apollo","addProduct","useAddImgToProductMutation","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","handleSubmit","a","document","getElementById","classList","remove","add","variables","Number","product_id","console","log","i","length","img_url","data","width","type","value","onChange","e","target","htmlFor","data-error","match","onClick","onDrop","file","form","FormData","append","t","Axios","post","headers","res","tmp","push","secure_url","getRootProps","getInputProps","map","_val","src","Announcements","loading","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","useEffect","M","AutoInit","announcements","getAnnouncements","window","location","reload","toast","html","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","discount","setDiscount","fresh","setFresh","elems","querySelectorAll","Modal","init","Dropdown","getCoupons","coupon_name","marginTop","data-target","minLength","maxLength","getProductId","split","EditProduct","error","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","tmp_name","tmp_desc","tmp_price","tmp_stock","product","getProduct","then","catch","Orders","getOrders","order","order_id","tracking_num","products","_val2","j","Products","backgroundColor","marginBottom","marginLeft","marginRight","fontWeight","fontSize","color","getProducts","margin","images","maxHeight","toFixed","Routes","exact","path","Login","username","setUsername","password","setPassword","apiLogin","localStorage","setItem","refreshToken","minHeight","minWidth","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.1b6614e0.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","const Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                        <ul id=\"nav-mobile\" className=\"center \">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/coupons\">\r\n                                    Coupons\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a\r\n                                    className=\"black-text\"\r\n                                    href=\"#/announcements\"\r\n                                >\r\n                                    Announcements\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  hello: Scalars['String'];\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Announcements;\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products: Array<Products>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n};\n\nexport type Products = {\n  __typename?: 'Products';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  exp_date?: Maybe<Scalars['String']>;\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['Int']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  checkout: Scalars['Boolean'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: (\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  ) }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num'>\n    & { products: Array<(\n      { __typename?: 'Products' }\n      & Pick<Products, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    )> }\n  )> }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n    }\n    order_id\n    tracking_num\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock) {\r\n            document.getElementById(\"name\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"desc\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"price\")!.classList.remove(\"invalid\");\r\n            document.getElementById(\"stock\")!.classList.remove(\"invalid\");\r\n            if (!name) {\r\n                document.getElementById(\"name\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!desc) {\r\n                document.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!price) {\r\n                document.getElementById(\"price\")!.classList.add(\"invalid\");\r\n            }\r\n            if (!stock) {\r\n                document.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n            }\r\n        } else {\r\n            let product_id = await addProduct({\r\n                variables: {\r\n                    name,\r\n                    desc,\r\n                    price: Number(price),\r\n                    stock: Number(stock),\r\n                },\r\n            });\r\n\r\n            console.log(\"product_id\", product_id);\r\n            //ADD IMAGES TO PRODUCT\r\n            for (let i = 0; i < image_urls.length; i++) {\r\n                await addImgToProduct({\r\n                    variables: {\r\n                        img_url: image_urls[i],\r\n                        product_id: Number(product_id.data!.addProduct),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    console.log(\"image_urls :>> \", image_urls);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            <Dropzone\r\n                onDrop={async ([file]) => {\r\n                    console.log(\"file :>> \", file);\r\n                    const form = new FormData();\r\n\r\n                    form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                    form.append(\"file\", file);\r\n                    form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                    form.append(\"upload_preset\", \"re5zmdqn\");\r\n                    let t = (Date.now() / 1000) | 0;\r\n                    form.append(\"timestamp\", `${t}`);\r\n\r\n                    // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                    let res = await Axios.post(\r\n                        \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n\r\n                    console.log(\"res :>> \", res);\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                    setRefresh(!refresh);\r\n                    //     .then(res => {\r\n                    //         //Save image url to add to DB on submit\r\n                    //         let tmp: any = image_urls;\r\n                    //         tmp.push(res.data.secure_url);\r\n                    //         setImage_urls(tmp);\r\n                    //     })\r\n                    //     .catch(error => {\r\n                    //         M.toast({\r\n                    //             html:\r\n                    //                 \"An Error occured, please try again later.\",\r\n                    //         });\r\n                    //         console.log(\"error\", error);\r\n                    //     });\r\n                }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <input {...getInputProps()} />\r\n                        DO NOT DOUBLE CLICK PHOTO! SELECT PHOTO THEN PRESS OPEN\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        console.log(\"test\");\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Announcements = () => {\r\n    const { data, loading } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    console.log(\"announcements.length :>> \", announcements.length);\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <>\r\n                                <div\r\n                                    className=\"container\"\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <h4 className=\"center-align\">\r\n                                        {data.getCoupons[i].coupon_name}\r\n                                    </h4>\r\n\r\n                                    <h4 className=\"center-align\">\r\n                                        -\r\n                                        {data.getCoupons[i].discount\r\n                                            ? data.getCoupons[i].discount\r\n                                            : 0}\r\n                                        %\r\n                                    </h4>\r\n                                    <i\r\n                                        className=\"material-icons red-text\"\r\n                                        onClick={async () => {\r\n                                            let tmp = await deleteCoupon({\r\n                                                variables: {\r\n                                                    coupon_name:\r\n                                                        data.getCoupons[i]\r\n                                                            .coupon_name,\r\n                                                },\r\n                                            });\r\n\r\n                                            if (!tmp!.data!.deleteCoupon) {\r\n                                                M.toast({\r\n                                                    html: \"An error occured\",\r\n                                                });\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"Could not delete coupon\",\r\n                                                });\r\n                                            } else {\r\n                                                window.location.reload();\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        delete\r\n                                    </i>\r\n                                </div>\r\n                            </>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useDeleteProductMutation,\r\n    useGetProductQuery,\r\n    useUpdateProductMutation,\r\n} from \"../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nconst EditProduct = () => {\r\n    let product_id = getProductId();\r\n\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const image_urls = [\"\"];\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <Redirect to=\"#/products\" />;\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        //only send values which were updated if state is empty product.prop is sent instead\r\n\r\n        let tmp_name = name,\r\n            tmp_desc = desc,\r\n            tmp_price = Number(price),\r\n            tmp_stock = Number(stock);\r\n\r\n        if (!name) {\r\n            tmp_name = product.name;\r\n        }\r\n\r\n        if (!desc) {\r\n            tmp_desc = product.desc;\r\n        }\r\n\r\n        if (!price) {\r\n            tmp_price = product.price;\r\n        }\r\n\r\n        if (!stock) {\r\n            tmp_stock = product.stock;\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: tmp_name,\r\n                desc: tmp_desc,\r\n                price: tmp_price,\r\n                stock: tmp_stock,\r\n            },\r\n        });\r\n\r\n        console.log(\"test\");\r\n        return <Redirect to=\"#/products\" />;\r\n    };\r\n\r\n    let product = data!.getProduct;\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => setPrice(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"price\">{product.price}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => setStock(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"stock\">${product.price / 100}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"btn green\" onClick={() => handleSubmit()}>\r\n                    Submit\r\n                </button>\r\n\r\n                <button\r\n                    className=\"btn right red\"\r\n                    onClick={async () => {\r\n                        await deleteProduct({ variables: { product_id } });\r\n                        window.location.reload();\r\n                    }}\r\n                >\r\n                    Delete Product\r\n                </button>\r\n\r\n                <Dropzone\r\n                    onDrop={async ([file]) => {\r\n                        const form = new FormData();\r\n\r\n                        form.append(\"api_key\", \"767632178961832\"); //get api key from cloudinary\r\n\r\n                        form.append(\"file\", file);\r\n                        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                        form.append(\"upload_preset\", \"re5zmdqn\");\r\n                        let t = (Date.now() / 1000) | 0;\r\n                        form.append(\"timestamp\", `${t}`);\r\n\r\n                        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                        Axios.post(\r\n                            \"https://api.cloudinary.com/v1_1/desimqzzy/image/upload\",\r\n                            form,\r\n                            {\r\n                                headers: {\r\n                                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                                },\r\n                            }\r\n                        )\r\n                            .then(res => {\r\n                                //Save image url to add to DB on submit\r\n                                image_urls.push(res.data.secure_url);\r\n                            })\r\n                            .catch(error => {\r\n                                M.toast({\r\n                                    html:\r\n                                        \"An Error occured, please try again later.\",\r\n                                });\r\n                                console.log(\"error\", error);\r\n                            });\r\n                    }}\r\n                >\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <div {...getRootProps()}>\r\n                            <input {...getInputProps()} />\r\n                            Click me to add a photo\r\n                        </div>\r\n                    )}\r\n                </Dropzone>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getProductId = (): number => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import { useGetOrdersQuery } from \"../generated/graphql\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading } = useGetOrdersQuery();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n    console.log(\"data :>> \", data);\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {data!.getOrders.map((_val, i) => {\r\n                        let order: any = data?.getOrders[i];\r\n                        return (\r\n                            <tr>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>{order?.tracking_num}</td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\">\r\n                                                    {order.products[j].name}\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import { useGetProductsQuery } from \"../generated/graphql\";\r\nimport \"../css/products.scss\";\r\nconst Products = () => {\r\n    const { data, loading } = useGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\" large material-icons\">\r\n                                        edit\r\n                                    </i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n\r\n// <div className=\"col s4\">\r\n//     <div className=\"card\">\r\n//         <div className=\"card-image\">\r\n//             {/* <img src=\"images/sample-1.jpg\"> */}\r\n//         </div>\r\n//         <div className=\"card-content\">\r\n//             <h6>Product Name</h6>\r\n//         </div>\r\n//     </div>\r\n// </div>\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/AddProducts\";\r\nimport Announcements from \"../components/Announcements\";\r\nimport Coupons from \"../components/Coupons\";\r\nimport EditProduct from \"../components/EditProduct\";\r\nimport Orders from \"../components/Orders\";\r\nimport Products from \"../components/Products\";\r\nimport AuthRoute from \"./AuthRoute\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/coupons\" component={Coupons} />\r\n            <AuthRoute exact path=\"/announcements\" component={Announcements} />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            console.log(\"res :>> \", res);\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://infinite-bayou-56493.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <AppWrapper />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}